import { Task } from "../data-handling/task";
import { Storage } from "../data-handling/storage";
import { projectList } from "../..";

export function ProjectPage() {
  const pageHeader = document.getElementById("project-page-header");
  const pageTasks = document.getElementById("project-page-tasks");
  const newTaskBtn = document.getElementById("project-page-new-task-button");

  let currentProject;
  let currentTasks;

  newTaskBtn.addEventListener("click", newTaskHandler);

  const publicMethods = {
    load: (project) => {
      currentProject = project;
      currentTasks = currentProject.getTasks();

      loadPage();
    },
  };

  return publicMethods;

  function loadPage() {
    clearPage();
    addHeader();
    addTasks();

    Storage.saveProjects(projectList);
  }

  function clearPage() {
    pageHeader.innerHTML = "";
    pageTasks.innerHTML = "";
  }

  function addHeader() {
    pageHeader.innerHTML = currentProject.getTitle();
  }

  function addTasks() {
    if (currentTasks)
      for (const key in currentTasks) {
        pageTasks.appendChild(createTaskElement(currentTasks[key]));
      }
  }

  function createTaskElement(task) {
    const title = task.getTitle();
    const description = task.getDescription();
    const dueDate = task.getDueDate();
    const priority = task.getPriority();
    const completed = task.getCompleted();

    const containerElement = document.createElement("div");
    containerElement.classList.add("task");

    containerElement.appendChild(createTitle());
    containerElement.appendChild(createDescription());
    containerElement.appendChild(createDueDate());
    containerElement.appendChild(createPriority());
    containerElement.appendChild(createCompleted());
    containerElement.appendChild(createDeleteTask());

    return containerElement;

    function createTitle() {
      const element = document.createElement("div");
      element.classList.add("task-title");
      element.innerHTML = title;

      return element;
    }

    function createDescription() {
      const element = document.createElement("div");
      element.classList.add("task-description");
      element.innerHTML = description;

      return element;
    }

    function createDueDate() {
      const element = document.createElement("div");
      element.classList.add("task-duedate");
      element.innerHTML = dueDate;

      return element;
    }

    function createPriority() {
      const element = document.createElement("div");
      element.classList.add("task-priority");
      element.classList.add(["low", "medium", "high"][priority]);
      element.innerHTML = ["Low", "Medium", "High"][priority];

      return element;
    }

    function createCompleted() {
      const element = document.createElement("input");
      element.classList.add("task-completed");
      element.type = "checkbox";
      element.checked = completed;
      element.disabled = true;

      return element;
    }

    function createDeleteTask() {
      const element = document.createElement("button");
      element.classList.add("task-delete-button");
      element.innerHTML = "Ã—";

      element.addEventListener("click", () => {
        if (confirm("Are you sure you wish to remove this task?")) {
          pageTasks.removeChild(containerElement);
          currentProject.deleteTask(task);
          Storage.saveProjects(projectList);
        }
      });

      return element;
    }
  }
  function newTaskHandler() {
    const form = document.getElementById("new-task-form");
    const formTitle = document.getElementById("new-task-form-title");
    const formDescription = document.getElementById("new-task-form-desc");
    const formDueDate = document.getElementById("new-task-form-duedate");
    const formPriority = document.getElementById("new-task-form-priority");
    const formCompleted = document.getElementById("new-task-form-completed");
    const formCancelBtn = document.getElementById("new-task-form-cancel");

    formCancelBtn.addEventListener("click", resetTaskHandler);
    form.addEventListener("submit", submitForm);

    form.style.display = "block";
    formTitle.focus();
    newTaskBtn.style.display = "none";

    function resetTaskHandler() {
      formCancelBtn.removeEventListener("click", resetTaskHandler);
      form.removeEventListener("submit", submitForm);

      form.style.display = "none";
      newTaskBtn.style.display = "inline";
      form.reset();
    }

    function submitForm() {
      currentProject.addTask(
        Task(
          formTitle.value,
          formDescription.value,
          formDueDate.value,
          formPriority.selectedIndex,
          formCompleted.value,
        ),
      );

      resetTaskHandler();
      loadPage();
    }
  }
}
